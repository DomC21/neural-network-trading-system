from datetime import datetime
from typing import List, Optional, Dict
from pydantic import BaseModel, Field
from sqlalchemy import Column, Integer, String, Float, JSON, DateTime, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Base = declarative_base()

# SQLAlchemy Models
class ServiceDB(Base):
    __tablename__ = "services"
    
    service_id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(255), nullable=False)
    description = Column(String, nullable=False)
    revenue = Column(Float, nullable=False)
    fixed_costs = Column(Float, nullable=False)
    variable_costs = Column(Float, nullable=False)
    resources = Column(JSON, nullable=False)  # Equipment and contractor info
    historical_profitability = Column(JSON, nullable=False)  # Monthly profits and seasonal data
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

# Pydantic Models for API
class ServiceCosts(BaseModel):
    fixed_costs: float = Field(..., description="Operational overhead costs")
    variable_costs: float = Field(..., description="Contractor payments, resource consumption")
    
class ServiceMetrics(BaseModel):
    revenue: float = Field(..., description="Revenue generated by service")
    usage_count: int = Field(..., description="Number of times service was used")
    profit_margin: float = Field(..., description="Calculated profit margin percentage")
    
class ServiceResources(BaseModel):
    equipment_required: List[str] = Field(default_factory=list, description="Required equipment")
    contractor_count: int = Field(..., description="Number of contractors needed")
    
class ServicePerformance(BaseModel):
    monthly_profits: List[float] = Field(..., description="Last 12 months of profit data")
    seasonal_trends: Dict[str, float] = Field(..., description="Seasonal performance patterns")
    
class Service(BaseModel):
    id: str = Field(..., description="Unique service identifier")
    name: str = Field(..., description="Service name")
    description: str = Field(..., description="Service description")
    category: str = Field(..., description="Current classification (Profitable/Optimization/Unprofitable)")
    costs: ServiceCosts
    metrics: ServiceMetrics
    resources: ServiceResources
    performance: ServicePerformance
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    
    class Config:
        from_attributes = True
    
class ServiceClassification(BaseModel):
    service_id: str
    category: str
    confidence_score: float = Field(..., description="ML model confidence in classification")
    optimization_suggestions: List[str] = Field(default_factory=list)
    market_insights: dict = Field(..., description="AI-gathered market research data")

# Database Configuration
DATABASE_URL = "sqlite:///./services.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create tables
def init_db():
    Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
